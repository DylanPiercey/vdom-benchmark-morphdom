{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/set-dom/lib/index.js","node_modules/vdom-benchmark-base/lib/benchmark.js","node_modules/vdom-benchmark-base/lib/executor.js","node_modules/vdom-benchmark-base/lib/index.js","web/js/main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","setDOM","prev","next","assert","nodeType","DOCUMENT_TYPE","documentElement","document","HTML_ELEMENT","innerHTML","BODY_ELEMENT","firstChild","setNode","ELEMENT_TYPE","hasAttribute","IGNORE","setChildNodes","childNodes","nodeName","setAttributes","attributes","newPrev","cloneNode","appendChild","parentNode","replaceChild","nodeValue","parent","b","ns","namespaceURI","getNamedItemNS","name","removeNamedItemNS","value","setNamedItemNS","prevChildNodes","nextChildNodes","key","newPosition","nextEl","keyNodes","removeChild","NODE_INDEX","insertBefore","el","result","len","getKey","node","getAttribute","KEY","id","val","msg","window","Node","ELEMENT_NODE","DOCUMENT_NODE","createElement","Benchmark","this","running","impl","tests","reportCallback","enableTests","container","_runButton","getElementById","_iterationsElement","_reportElement","body","self","addEventListener","preventDefault","iterations","parseInt","run","ready","Executor","prototype","v","disabled","samples","textContent","JSON","stringify","undefined","start","render","nodes","j","c","children","push","toString","testInnerHtml","testName","console","log","cb","iterCb","_currentTest","_currentIter","_renderSamples","_updateSamples","_result","_tasksCount","_iter","iter","bind","finished","progress","iterataions","test","renderTime","updateTime","data","setUp","performance","now","update","tearDown","slice","setTimeout","initFromScript","scriptUrl","src","onload","benchmark","generateBenchmarkData","units","head","initFromParentWindow","version","type","postMessage","init","qs","p","split","decodeURIComponent","replace","location","search","substr","opener","testsUrl","nowOffset","Date","timing","navigationStart","renderTree","depth","BenchmarkImpl","_root","NAME","VERSION"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nvar NODE_INDEX = '__set-dom-index__'\nvar ELEMENT_TYPE = window.Node.ELEMENT_NODE\nvar DOCUMENT_TYPE = window.Node.DOCUMENT_NODE\nvar HTML_ELEMENT = document.createElement('html')\nvar BODY_ELEMENT = document.createElement('body')\nsetDOM.KEY = 'data-key'\nsetDOM.IGNORE = 'data-ignore'\n\nmodule.exports = setDOM\n\n/**\n * @description\n * Updates existing dom to match a new dom.\n *\n * @param {Node} prev - The html entity to update.\n * @param {String|Node} next - The updated html(entity).\n */\nfunction setDOM (prev, next) {\n  // Ensure a realish dom node is provided.\n  assert(prev && prev.nodeType, 'You must provide a valid node to update.')\n\n  // Alias document element with document.\n  if (prev.nodeType === DOCUMENT_TYPE) prev = prev.documentElement\n\n  // If a string was provided we will parse it as dom.\n  if (typeof next === 'string') {\n    if (prev === document.documentElement) {\n      HTML_ELEMENT.innerHTML = next\n      next = HTML_ELEMENT\n    } else {\n      BODY_ELEMENT.innerHTML = next\n      next = BODY_ELEMENT.firstChild\n    }\n  }\n\n  // Update the node.\n  setNode(prev, next)\n}\n\n/**\n * @private\n * @description\n * Updates a specific htmlNode and does whatever it takes to convert it to another one.\n *\n * @param {Node} prev - The previous HTMLNode.\n * @param {Node} next - The updated HTMLNode.\n */\nfunction setNode (prev, next) {\n  // Handle regular element node updates.\n  if (prev.nodeType === ELEMENT_TYPE) {\n    // Ignore elements that explicity choose not to be diffed.\n    if (!prev.hasAttribute(setDOM.IGNORE)) {\n      // Update all children (and subchildren).\n      setChildNodes(prev, prev.childNodes, next.childNodes)\n\n      // Update the elements attributes / tagName.\n      if (prev.nodeName === next.nodeName) {\n        // If we have the same nodename then we can directly update the attributes.\n        setAttributes(prev, prev.attributes, next.attributes)\n      } else {\n        // Otherwise clone the new node to use as the existing node.\n        var newPrev = next.cloneNode()\n        // Copy over all existing children from the original node.\n        while (prev.firstChild) newPrev.appendChild(prev.firstChild)\n        // Replace the original node with the new one with the right tag.\n        prev.parentNode.replaceChild(newPrev, prev)\n      }\n    }\n  } else if (prev.nodeType === next.nodeType) {\n    // Handle other types of node updates (text/comments/etc).\n    // If both are the same type of node we can update directly.\n    if (prev.nodeValue !== next.nodeValue) {\n      prev.nodeValue = next.nodeValue\n    }\n  } else {\n    // we have to replace the node.\n    prev.parentNode.replaceChild(next, prev)\n  }\n}\n\n/**\n * @private\n * @description\n * Utility that will update one list of attributes to match another.\n *\n * @param {Node} parent - The current parentNode being updated.\n * @param {NamedNodeMap} prev - The previous attributes.\n * @param {NamedNodeMap} next - The updated attributes.\n */\nfunction setAttributes (parent, prev, next) {\n  var i, a, b, ns\n\n  // Remove old attributes.\n  for (i = prev.length; i--;) {\n    a = prev[i]\n    ns = a.namespaceURI\n    b = next.getNamedItemNS(ns, a.name)\n    if (!b) prev.removeNamedItemNS(ns, a.name)\n  }\n\n  // Set new attributes.\n  for (i = next.length; i--;) {\n    a = next[i]\n    ns = a.namespaceURI\n    b = prev.getNamedItemNS(ns, a.name)\n    if (!b) {\n      // Add a new attribute.\n      next.removeNamedItemNS(ns, a.name)\n      prev.setNamedItemNS(a)\n    } else if (b.value !== a.value) {\n      // Update existing attribute.\n      b.value = a.value\n    }\n  }\n}\n\n/**\n * @private\n * @description\n * Utility that will update one list of childNodes to match another.\n *\n * @param {Node} parent - The current parentNode being updated.\n * @param {NodeList} prevChildNodes - The previous children.\n * @param {NodeList} nextChildNodes - The updated children.\n */\nfunction setChildNodes (parent, prevChildNodes, nextChildNodes) {\n  var key, a, b, newPosition, nextEl\n\n  // Convert nodelists into a usuable map.\n  var prev = keyNodes(prevChildNodes)\n  var next = keyNodes(nextChildNodes)\n\n  // Remove old nodes.\n  for (key in prev) {\n    if (next[key]) continue\n    parent.removeChild(prev[key])\n  }\n\n  // Set new nodes.\n  for (key in next) {\n    a = prev[key]\n    b = next[key]\n    // Extract the position of the new node.\n    newPosition = b[NODE_INDEX]\n\n    if (a) {\n      // Update an existing node.\n      setNode(a, b)\n      // Check if the node has moved in the tree.\n      if (a[NODE_INDEX] === newPosition) continue\n      // Get the current element at the new position.\n      nextEl = prevChildNodes[newPosition] || null\n      // Check if the node has already been properly positioned.\n      if (nextEl === a) continue\n      // Reposition node.\n      parent.insertBefore(a, nextEl)\n    } else {\n      // Get the current element at the new position.\n      nextEl = prevChildNodes[newPosition] || null\n      // Append the new node at the correct position.\n      parent.insertBefore(b, nextEl)\n    }\n  }\n}\n\n/**\n * @private\n * @description\n * Converts a nodelist into a keyed map.\n * This is used for diffing while keeping elements with 'data-key' or 'id' if possible.\n *\n * @param {NodeList} childNodes - The childNodes to convert.\n * @return {Object}\n */\nfunction keyNodes (childNodes) {\n  var result = {}\n  var len = childNodes.length\n  var el\n\n  for (var i = 0; i < len; i++) {\n    el = childNodes[i]\n    el[NODE_INDEX] = i\n    result[getKey(el) || i] = el\n  }\n\n  return result\n}\n\n/**\n * @private\n * @description\n * Utility to try to pull a key out of an element.\n * Uses 'data-key' if possible and falls back to 'id'.\n *\n * @param {Node} node - The node to get the key for.\n * @return {String}\n */\nfunction getKey (node) {\n  if (node.nodeType !== ELEMENT_TYPE) return\n  return node.getAttribute(setDOM.KEY) || node.id\n}\n\n/**\n * @private\n * @description\n * Confirm that a value is truthy, throws an error message otherwise.\n *\n * @param {*} val - the val to test.\n * @param {String} msg - the error message on failure.\n * @throws Error\n */\nfunction assert (val, msg) {\n  if (!val) throw new Error('set-dom: ' + msg)\n}\n","'use strict';\n\nvar Executor = require('./executor');\n\nfunction Benchmark() {\n  this.running = false;\n  this.impl = null;\n  this.tests = null;\n  this.reportCallback = null;\n  this.enableTests = false;\n\n  this.container = document.createElement('div');\n\n  this._runButton = document.getElementById('RunButton');\n  this._iterationsElement = document.getElementById('Iterations');\n  this._reportElement = document.createElement('pre');\n\n  document.body.appendChild(this.container);\n  document.body.appendChild(this._reportElement);\n\n  var self = this;\n\n  this._runButton.addEventListener('click', function(e) {\n    e.preventDefault();\n\n    if (!self.running) {\n      var iterations = parseInt(self._iterationsElement.value);\n      if (iterations <= 0) {\n        iterations = 10;\n      }\n\n      self.run(iterations);\n    }\n  }, false);\n\n  this.ready(true);\n}\n\nBenchmark.prototype.ready = function(v) {\n  if (v) {\n    this._runButton.disabled = '';\n  } else {\n    this._runButton.disabled = 'true';\n  }\n};\n\nBenchmark.prototype.run = function(iterations) {\n  var self = this;\n  this.running = true;\n  this.ready(false);\n\n  new Executor(self.impl, self.container, self.tests, 1, function() { // warmup\n    new Executor(self.impl, self.container, self.tests, iterations, function(samples) {\n      self._reportElement.textContent = JSON.stringify(samples, null, ' ');\n      self.running = false;\n      self.ready(true);\n      if (self.reportCallback != null) {\n        self.reportCallback(samples);\n      }\n    }, undefined, false).start();\n  }, undefined, this.enableTests).start();\n};\n\nmodule.exports = Benchmark;\n","'use strict';\n\nfunction render(nodes) {\n  var children = [];\n  var j;\n  var c;\n  var i;\n  var e;\n  var n;\n\n  for (i = 0; i < nodes.length; i++) {\n    n = nodes[i];\n    if (n.children !== null) {\n      e = document.createElement('div');\n      c = render(n.children);\n      for (j = 0; j < c.length; j++) {\n        e.appendChild(c[j]);\n      }\n      children.push(e);\n    } else {\n      e = document.createElement('span');\n      e.textContent = n.key.toString();\n      children.push(e);\n    }\n  }\n\n  return children;\n}\n\nfunction testInnerHtml(testName, nodes, container) {\n  var c = document.createElement('div');\n  var e = document.createElement('div');\n  var children = render(nodes);\n  for (var i = 0; i < children.length; i++) {\n    e.appendChild(children[i]);\n  }\n  c.appendChild(e);\n  if (c.innerHTML !== container.innerHTML) {\n    console.log('error in test: ' + testName);\n    console.log('container.innerHTML:');\n    console.log(container.innerHTML);\n    console.log('should be:');\n    console.log(c.innerHTML);\n  }\n}\n\n\nfunction Executor(impl, container, tests, iterations, cb, iterCb, enableTests) {\n  if (iterCb === void 0) iterCb = null;\n\n  this.impl = impl;\n  this.container = container;\n  this.tests = tests;\n  this.iterations = iterations;\n  this.cb = cb;\n  this.iterCb = iterCb;\n  this.enableTests = enableTests;\n\n  this._currentTest = 0;\n  this._currentIter = 0;\n  this._renderSamples = [];\n  this._updateSamples = [];\n  this._result = [];\n\n  this._tasksCount = tests.length * iterations;\n\n  this._iter = this.iter.bind(this);\n}\n\nExecutor.prototype.start = function() {\n  this._iter();\n};\n\nExecutor.prototype.finished = function() {\n  this.cb(this._result);\n};\n\nExecutor.prototype.progress = function() {\n  if (this._currentTest === 0 && this._currentIter === 0) {\n    return 0;\n  }\n\n  var tests = this.tests;\n  return (this._currentTest * tests.length + this._currentIter) / (tests.length * this.iterataions);\n};\n\nExecutor.prototype.iter = function() {\n  if (this.iterCb != null) {\n    this.iterCb(this);\n  }\n\n  var tests = this.tests;\n\n  if (this._currentTest < tests.length) {\n    var test = tests[this._currentTest];\n\n    if (this._currentIter < this.iterations) {\n      var e, t;\n      var renderTime, updateTime;\n\n      e = new this.impl(this.container, test.data.a, test.data.b);\n      e.setUp();\n\n      t = window.performance.now();\n      e.render();\n      renderTime = window.performance.now() - t;\n\n      if (this.enableTests) {\n        testInnerHtml(test.name + 'render()', test.data.a, this.container);\n      }\n\n      t = window.performance.now();\n      e.update();\n      updateTime = window.performance.now() - t;\n\n      if (this.enableTests) {\n        testInnerHtml(test.name + 'update()', test.data.b, this.container);\n      }\n\n      e.tearDown();\n\n      this._renderSamples.push(renderTime);\n      this._updateSamples.push(updateTime);\n\n      this._currentIter++;\n    } else {\n      this._result.push({\n        name: test.name + ' ' + 'render()',\n        data: this._renderSamples.slice(0)\n      });\n\n      this._result.push({\n        name: test.name + ' ' + 'update()',\n        data: this._updateSamples.slice(0)\n      });\n\n      this._currentTest++;\n\n      this._currentIter = 0;\n      this._renderSamples = [];\n      this._updateSamples = [];\n    }\n\n    setTimeout(this._iter, 0);\n  } else {\n    this.finished();\n  }\n};\n\nmodule.exports = Executor;\n","'use strict';\n\nvar Benchmark = require('./benchmark');\nvar benchmark = new Benchmark();\n\nfunction initFromScript(scriptUrl, impl) {\n  var e = document.createElement('script');\n  e.src = scriptUrl;\n\n  e.onload = function() {\n    benchmark.tests = window.generateBenchmarkData().units;\n    benchmark.ready(true);\n  };\n\n  document.head.appendChild(e);\n}\n\nfunction initFromParentWindow(parent, name, version, id) {\n  window.addEventListener('message', function(e) {\n    var data = e.data;\n    var type = data.type;\n\n    if (type === 'tests') {\n      benchmark.tests = data.data;\n      benchmark.reportCallback = function(samples) {\n        parent.postMessage({\n          type: 'report',\n          data: {\n            name: name,\n            version: version,\n            samples: samples\n          },\n          id: id\n        }, '*');\n      };\n      benchmark.ready(true);\n\n      parent.postMessage({\n        type: 'ready',\n        data: null,\n        id: id\n      }, '*');\n    } else if (type === 'run') {\n      benchmark.run(data.data.iterations);\n    }\n  }, false);\n\n  parent.postMessage({\n    type: 'init',\n    data: null,\n    id: id\n  }, '*');\n}\n\nfunction init(name, version, impl) {\n  // Parse Query String.\n  var qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n      var p=a[i].split('=', 2);\n      if (p.length == 1) {\n        b[p[0]] = \"\";\n      } else {\n        b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n      }\n    }\n    return b;\n  })(window.location.search.substr(1).split('&'));\n\n  if (qs['name'] !== void 0) {\n    name = qs['name'];\n  }\n\n  if (qs['version'] !== void 0) {\n    version = qs['version'];\n  }\n\n  var type = qs['type'];\n\n  if (qs['test'] !== void 0) {\n    benchmark.enableTests = true;\n    console.log('tests enabled');\n  }\n\n  var id;\n  if (type === 'iframe') {\n    id = qs['id'];\n    if (id === void 0) id = null;\n    initFromParentWindow(window.parent, name, version, id);\n  } else if (type === 'window') {\n    if (window.opener != null) {\n      id = qs['id'];\n      if (id === void 0) id = null;\n      initFromParentWindow(window.opener, name, version, id);\n    } else {\n      console.log('Failed to initialize: opener window is NULL');\n    }\n  } else {\n    var testsUrl = qs['data']; // url to the script generating test data\n    if (testsUrl !== void 0) {\n      initFromScript(testsUrl);\n    } else {\n      console.log('Failed to initialize: cannot load tests data');\n    }\n  }\n\n  benchmark.impl = impl;\n}\n\n// performance.now() polyfill\n// https://gist.github.com/paulirish/5438650\n// prepare base perf object\nif (typeof window.performance === 'undefined') {\n  window.performance = {};\n}\nif (!window.performance.now){\n  var nowOffset = Date.now();\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n  window.performance.now = function now(){\n    return Date.now() - nowOffset;\n  };\n}\n\nmodule.exports = init;\n","'use strict'\n\nvar benchmark = require('vdom-benchmark-base')\nvar setDOM = require('set-dom')\n\nvar NAME = 'set-dom'\nvar VERSION = '0.2.3'\n\nfunction renderTree (nodes, parent, depth) {\n  var e\n  for (var i = 0; i < nodes.length; i++) {\n    var n = nodes[i]\n    if (n.children !== null) {\n      e = document.createElement('div')\n      e.id = '' + depth + '_' + n.key\n      parent.appendChild(e)\n      renderTree(n.children, e, depth + 1)\n    } else {\n      e = document.createElement('span')\n      e.id = '' + depth + '_' + n.key\n      e.textContent = n.key\n      parent.appendChild(e)\n    }\n  }\n}\n\nfunction BenchmarkImpl (container, a, b) {\n  this.container = container\n  this.a = a\n  this.b = b\n  this._root = null\n}\n\nBenchmarkImpl.prototype.setUp = function () {}\n\nBenchmarkImpl.prototype.tearDown = function () {\n  this.container.removeChild(this.container.firstChild)\n}\n\nBenchmarkImpl.prototype.render = function () {\n  this._root = document.createElement('div')\n  renderTree(this.a, this._root, 0)\n  this.container.appendChild(this._root)\n}\n\nBenchmarkImpl.prototype.update = function () {\n  var e = document.createElement('div')\n  renderTree(this.b, e, 0)\n  setDOM(this._root, e)\n}\n\ndocument.addEventListener('DOMContentLoaded', function (e) {\n  benchmark(NAME, VERSION, BenchmarkImpl)\n}, false)\n"],"sourceRoot":"/source/"}