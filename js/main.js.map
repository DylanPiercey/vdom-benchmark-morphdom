{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/set-dom/src/index.js","node_modules/set-dom/src/parse-html.js","node_modules/vdom-benchmark-base/lib/benchmark.js","node_modules/vdom-benchmark-base/lib/executor.js","node_modules/vdom-benchmark-base/lib/index.js","package.json","web/js/main.js"],"names":[],"mappingsxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict'\n\nvar parseHTML = require('./parse-html')\nvar KEY_PREFIX = '_set-dom-'\nvar NODE_INDEX = KEY_PREFIX + 'index'\nvar NODE_MOUNTED = KEY_PREFIX + 'mounted'\nvar ELEMENT_TYPE = window.Node.ELEMENT_NODE\nvar DOCUMENT_TYPE = window.Node.DOCUMENT_NODE\nsetDOM.KEY = 'data-key'\nsetDOM.IGNORE = 'data-ignore'\n\nmodule.exports = setDOM\n\n/**\n * @description\n * Updates existing dom to match a new dom.\n *\n * @param {Node} prev - The html entity to update.\n * @param {String|Node} next - The updated html(entity).\n */\nfunction setDOM (prev, next) {\n  // Ensure a realish dom node is provided.\n  assert(prev && prev.nodeType, 'You must provide a valid node to update.')\n\n  // Alias document element with document.\n  if (prev.nodeType === DOCUMENT_TYPE) prev = prev.documentElement\n\n  // If a string was provided we will parse it as dom.\n  if (typeof next === 'string') next = parseHTML(next, prev.nodeName)\n\n  // Update the node.\n  setNode(prev, next)\n\n  // Trigger mount events on initial set.\n  if (!prev[NODE_MOUNTED]) {\n    prev[NODE_MOUNTED] = true\n    mount(prev)\n  }\n}\n\n/**\n * @private\n * @description\n * Updates a specific htmlNode and does whatever it takes to convert it to another one.\n *\n * @param {Node} prev - The previous HTMLNode.\n * @param {Node} next - The updated HTMLNode.\n */\nfunction setNode (prev, next) {\n  if (prev.nodeType === next.nodeType) {\n    // Handle regular element node updates.\n    if (prev.nodeType === ELEMENT_TYPE) {\n      // Ignore elements that explicity choose not to be diffed.\n      if (!(prev.attributes[setDOM.IGNORE] && next.attributes[setDOM.IGNORE])) {\n        // Update all children (and subchildren).\n        setChildNodes(prev, prev.childNodes, next.childNodes)\n\n        // Update the elements attributes / tagName.\n        if (prev.nodeName === next.nodeName) {\n          // If we have the same nodename then we can directly update the attributes.\n          setAttributes(prev, prev.attributes, next.attributes)\n        } else {\n          // Otherwise clone the new node to use as the existing node.\n          var newPrev = next.cloneNode()\n          // Copy over all existing children from the original node.\n          while (prev.firstChild) newPrev.appendChild(prev.firstChild)\n          // Replace the original node with the new one with the right tag.\n          prev.parentNode.replaceChild(newPrev, prev)\n        }\n      }\n    } else {\n      // Handle other types of node updates (text/comments/etc).\n      // If both are the same type of node we can update directly.\n      if (prev.nodeValue !== next.nodeValue) {\n        prev.nodeValue = next.nodeValue\n      }\n    }\n  } else {\n    // we have to replace the node.\n    dismount(prev)\n    prev.parentNode.replaceChild(next, prev)\n    mount(next)\n  }\n}\n\n/**\n * @private\n * @description\n * Utility that will update one list of attributes to match another.\n *\n * @param {Node} parent - The current parentNode being updated.\n * @param {NamedNodeMap} prev - The previous attributes.\n * @param {NamedNodeMap} next - The updated attributes.\n */\nfunction setAttributes (parent, prev, next) {\n  var i, a, b, ns, name\n\n  // Remove old attributes.\n  for (i = prev.length; i--;) {\n    a = prev[i]\n    ns = a.namespaceURI\n    name = a.localName\n    b = next.getNamedItemNS(ns, name)\n    if (!b) prev.removeNamedItemNS(ns, name)\n  }\n\n  // Set new attributes.\n  for (i = next.length; i--;) {\n    a = next[i]\n    ns = a.namespaceURI\n    name = a.localName\n    b = prev.getNamedItemNS(ns, name)\n    if (!b) {\n      // Add a new attribute.\n      next.removeNamedItemNS(ns, name)\n      prev.setNamedItemNS(a)\n    } else if (b.value !== a.value) {\n      // Update existing attribute.\n      b.value = a.value\n    }\n  }\n}\n\n/**\n * @private\n * @description\n * Utility that will update one list of childNodes to match another.\n *\n * @param {Node} parent - The current parentNode being updated.\n * @param {NodeList} prevChildNodes - The previous children.\n * @param {NodeList} nextChildNodes - The updated children.\n */\nfunction setChildNodes (parent, prevChildNodes, nextChildNodes) {\n  var key, a, b, newPosition, nextEl\n\n  // Convert nodelists into a usuable map.\n  var prev = keyNodes(prevChildNodes)\n  var next = keyNodes(nextChildNodes)\n\n  // Remove old nodes.\n  for (key in prev) {\n    if (next[key]) continue\n    // Trigger custom dismount event.\n    dismount(prev[key])\n    // Remove child from dom.\n    parent.removeChild(prev[key])\n  }\n\n  // Set new nodes.\n  for (key in next) {\n    a = prev[key]\n    b = next[key]\n    // Extract the position of the new node.\n    newPosition = b[NODE_INDEX]\n\n    if (a) {\n      // Update an existing node.\n      setNode(a, b)\n      // Check if the node has moved in the tree.\n      if (a[NODE_INDEX] === newPosition) continue\n      // Get the current element at the new position.\n      /* istanbul ignore next */\n      nextEl = prevChildNodes[newPosition] || null // TODO: figure out if || null is needed.\n      // Check if the node has already been properly positioned.\n      if (nextEl === a) continue\n      // Reposition node.\n      parent.insertBefore(a, nextEl)\n    } else {\n      // Get the current element at the new position.\n      nextEl = prevChildNodes[newPosition] || null\n      // Append the new node at the correct position.\n      parent.insertBefore(b, nextEl)\n      // Trigger custom mounted event.\n      mount(b)\n    }\n  }\n}\n\n/**\n * @private\n * @description\n * Converts a nodelist into a keyed map.\n * This is used for diffing while keeping elements with 'data-key' or 'id' if possible.\n *\n * @param {NodeList} childNodes - The childNodes to convert.\n * @return {Object}\n */\nfunction keyNodes (childNodes) {\n  var result = {}\n  var len = childNodes.length\n  var el\n\n  for (var i = 0; i < len; i++) {\n    el = childNodes[i]\n    el[NODE_INDEX] = i\n    result[getKey(el) || i] = el\n  }\n\n  return result\n}\n\n/**\n * @private\n * @description\n * Utility to try to pull a key out of an element.\n * Uses 'data-key' if possible and falls back to 'id'.\n *\n * @param {Node} node - The node to get the key for.\n * @return {String}\n */\nfunction getKey (node) {\n  if (node.nodeType !== ELEMENT_TYPE) return\n  var key = node.getAttribute(setDOM.KEY) || node.id\n  if (key) key = KEY_PREFIX + key\n  return key && KEY_PREFIX + key\n}\n\n/**\n * Recursively trigger a mount event for a node and it's children.\n *\n * @param {Node} node - the initial node to be mounted.\n */\nfunction mount (node) {\n  // Trigger mount event for this element if it has a key.\n  if (getKey(node)) dispatch(node, 'mount')\n\n  // Mount all children.\n  var child = node.firstChild\n  while (child) {\n    mount(child)\n    child = child.nextSibling\n  }\n}\n\n/**\n * Recursively trigger a dismount event for a node and it's children.\n *\n * @param {Node} node - the initial node to be dismounted.\n */\nfunction dismount (node) {\n  // Dismount all children.\n  var child = node.firstChild\n  while (child) {\n    dismount(child)\n    child = child.nextSibling\n  }\n\n  // Trigger dismount event for this element if it has a key.\n  if (getKey(node)) dispatch(node, 'dismount')\n}\n\n/**\n * @private\n * @description\n * Create and dispatch a custom event.\n *\n * @param {Node} el - the node to dispatch the event for.\n * @param {String} type - the name of the event.\n */\nfunction dispatch (el, type) {\n  var e = document.createEvent('Event')\n  var prop = { value: el }\n  e.initEvent(type, false, false)\n  Object.defineProperty(e, 'target', prop)\n  Object.defineProperty(e, 'srcElement', prop)\n  el.dispatchEvent(e)\n}\n\n/**\n * @private\n * @description\n * Confirm that a value is truthy, throws an error message otherwise.\n *\n * @param {*} val - the val to test.\n * @param {String} msg - the error message on failure.\n * @throws Error\n */\nfunction assert (val, msg) {\n  if (!val) throw new Error('set-dom: ' + msg)\n}\n","'use strict'\n\nvar parser = new window.DOMParser()\nvar htmlType = 'text/html'\nvar xhtmlType = 'application/xhtml+xml'\nvar testCode = '<i></i>'\nvar documentRootName = 'HTML'\nvar supportsHTMLType = false\nvar supportsXHTMLType = false\n\n// Check if browser supports text/html DOMParser\ntry {\n  /* istanbul ignore next: Fails in older browsers */\n  if (parser.parseFromString(testCode, htmlType)) supportsHTMLType = true\n} catch (err) {}\n\ntry {\n  /* istanbul ignore next: Only used in ie9 */\n  if (!supportsHTMLType && parser.parseFromString(testCode, xhtmlType)) supportsXHTMLType = true\n} catch (err) {}\n\n/**\n * Returns the results of a DOMParser as an HTMLElement.\n * (Shims for older browser and IE9).\n */\nmodule.exports = supportsHTMLType\n  ? function parseHTML (markup, rootName) {\n    var doc = parser.parseFromString(markup, htmlType)\n    return rootName === documentRootName\n      ? doc.documentElement\n      : doc.body.firstChild\n  }\n  /* istanbul ignore next: Only used in older browsers */\n  : function parseHTML (markup, rootName) {\n    var isRoot = rootName === documentRootName\n\n    // Special case for ie9 (documentElement.innerHTML not supported).\n    if (supportsXHTMLType && isRoot) {\n      return parser.parseFromString(markup, xhtmlType).documentElement\n    }\n\n    // Fallback to innerHTML for other older browsers.\n    var doc = document.implementation.createHTMLDocument('')\n    if (isRoot) {\n      doc.documentElement.innerHTML = markup\n      return doc.documentElement\n    } else {\n      doc.body.innerHTML = markup\n      return doc.body.firstChild\n    }\n  }\n","'use strict';\n\nvar Executor = require('./executor');\n\nfunction Benchmark() {\n  this.running = false;\n  this.impl = null;\n  this.tests = null;\n  this.reportCallback = null;\n  this.enableTests = false;\n\n  this.container = document.createElement('div');\n\n  this._runButton = document.getElementById('RunButton');\n  this._iterationsElement = document.getElementById('Iterations');\n  this._reportElement = document.createElement('pre');\n\n  document.body.appendChild(this.container);\n  document.body.appendChild(this._reportElement);\n\n  var self = this;\n\n  this._runButton.addEventListener('click', function(e) {\n    e.preventDefault();\n\n    if (!self.running) {\n      var iterations = parseInt(self._iterationsElement.value);\n      if (iterations <= 0) {\n        iterations = 10;\n      }\n\n      self.run(iterations);\n    }\n  }, false);\n\n  this.ready(true);\n}\n\nBenchmark.prototype.ready = function(v) {\n  if (v) {\n    this._runButton.disabled = '';\n  } else {\n    this._runButton.disabled = 'true';\n  }\n};\n\nBenchmark.prototype.run = function(iterations) {\n  var self = this;\n  this.running = true;\n  this.ready(false);\n\n  new Executor(self.impl, self.container, self.tests, 1, function() { // warmup\n    new Executor(self.impl, self.container, self.tests, iterations, function(samples) {\n      self._reportElement.textContent = JSON.stringify(samples, null, ' ');\n      self.running = false;\n      self.ready(true);\n      if (self.reportCallback != null) {\n        self.reportCallback(samples);\n      }\n    }, undefined, false).start();\n  }, undefined, this.enableTests).start();\n};\n\nmodule.exports = Benchmark;\n","'use strict';\n\nfunction render(nodes) {\n  var children = [];\n  var j;\n  var c;\n  var i;\n  var e;\n  var n;\n\n  for (i = 0; i < nodes.length; i++) {\n    n = nodes[i];\n    if (n.children !== null) {\n      e = document.createElement('div');\n      c = render(n.children);\n      for (j = 0; j < c.length; j++) {\n        e.appendChild(c[j]);\n      }\n      children.push(e);\n    } else {\n      e = document.createElement('span');\n      e.textContent = n.key.toString();\n      children.push(e);\n    }\n  }\n\n  return children;\n}\n\nfunction testInnerHtml(testName, nodes, container) {\n  var c = document.createElement('div');\n  var e = document.createElement('div');\n  var children = render(nodes);\n  for (var i = 0; i < children.length; i++) {\n    e.appendChild(children[i]);\n  }\n  c.appendChild(e);\n  if (c.innerHTML !== container.innerHTML) {\n    console.log('error in test: ' + testName);\n    console.log('container.innerHTML:');\n    console.log(container.innerHTML);\n    console.log('should be:');\n    console.log(c.innerHTML);\n  }\n}\n\n\nfunction Executor(impl, container, tests, iterations, cb, iterCb, enableTests) {\n  if (iterCb === void 0) iterCb = null;\n\n  this.impl = impl;\n  this.container = container;\n  this.tests = tests;\n  this.iterations = iterations;\n  this.cb = cb;\n  this.iterCb = iterCb;\n  this.enableTests = enableTests;\n\n  this._currentTest = 0;\n  this._currentIter = 0;\n  this._renderSamples = [];\n  this._updateSamples = [];\n  this._result = [];\n\n  this._tasksCount = tests.length * iterations;\n\n  this._iter = this.iter.bind(this);\n}\n\nExecutor.prototype.start = function() {\n  this._iter();\n};\n\nExecutor.prototype.finished = function() {\n  this.cb(this._result);\n};\n\nExecutor.prototype.progress = function() {\n  if (this._currentTest === 0 && this._currentIter === 0) {\n    return 0;\n  }\n\n  var tests = this.tests;\n  return (this._currentTest * tests.length + this._currentIter) / (tests.length * this.iterataions);\n};\n\nExecutor.prototype.iter = function() {\n  if (this.iterCb != null) {\n    this.iterCb(this);\n  }\n\n  var tests = this.tests;\n\n  if (this._currentTest < tests.length) {\n    var test = tests[this._currentTest];\n\n    if (this._currentIter < this.iterations) {\n      var e, t;\n      var renderTime, updateTime;\n\n      e = new this.impl(this.container, test.data.a, test.data.b);\n      e.setUp();\n\n      t = window.performance.now();\n      e.render();\n      renderTime = window.performance.now() - t;\n\n      if (this.enableTests) {\n        testInnerHtml(test.name + 'render()', test.data.a, this.container);\n      }\n\n      t = window.performance.now();\n      e.update();\n      updateTime = window.performance.now() - t;\n\n      if (this.enableTests) {\n        testInnerHtml(test.name + 'update()', test.data.b, this.container);\n      }\n\n      e.tearDown();\n\n      this._renderSamples.push(renderTime);\n      this._updateSamples.push(updateTime);\n\n      this._currentIter++;\n    } else {\n      this._result.push({\n        name: test.name + ' ' + 'render()',\n        data: this._renderSamples.slice(0)\n      });\n\n      this._result.push({\n        name: test.name + ' ' + 'update()',\n        data: this._updateSamples.slice(0)\n      });\n\n      this._currentTest++;\n\n      this._currentIter = 0;\n      this._renderSamples = [];\n      this._updateSamples = [];\n    }\n\n    setTimeout(this._iter, 0);\n  } else {\n    this.finished();\n  }\n};\n\nmodule.exports = Executor;\n","'use strict';\n\nvar Benchmark = require('./benchmark');\nvar benchmark = new Benchmark();\n\nfunction initFromScript(scriptUrl, impl) {\n  var e = document.createElement('script');\n  e.src = scriptUrl;\n\n  e.onload = function() {\n    benchmark.tests = window.generateBenchmarkData().units;\n    benchmark.ready(true);\n  };\n\n  document.head.appendChild(e);\n}\n\nfunction initFromParentWindow(parent, name, version, id) {\n  window.addEventListener('message', function(e) {\n    var data = e.data;\n    var type = data.type;\n\n    if (type === 'tests') {\n      benchmark.tests = data.data;\n      benchmark.reportCallback = function(samples) {\n        parent.postMessage({\n          type: 'report',\n          data: {\n            name: name,\n            version: version,\n            samples: samples\n          },\n          id: id\n        }, '*');\n      };\n      benchmark.ready(true);\n\n      parent.postMessage({\n        type: 'ready',\n        data: null,\n        id: id\n      }, '*');\n    } else if (type === 'run') {\n      benchmark.run(data.data.iterations);\n    }\n  }, false);\n\n  parent.postMessage({\n    type: 'init',\n    data: null,\n    id: id\n  }, '*');\n}\n\nfunction init(name, version, impl) {\n  // Parse Query String.\n  var qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n      var p=a[i].split('=', 2);\n      if (p.length == 1) {\n        b[p[0]] = \"\";\n      } else {\n        b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n      }\n    }\n    return b;\n  })(window.location.search.substr(1).split('&'));\n\n  if (qs['name'] !== void 0) {\n    name = qs['name'];\n  }\n\n  if (qs['version'] !== void 0) {\n    version = qs['version'];\n  }\n\n  var type = qs['type'];\n\n  if (qs['test'] !== void 0) {\n    benchmark.enableTests = true;\n    console.log('tests enabled');\n  }\n\n  var id;\n  if (type === 'iframe') {\n    id = qs['id'];\n    if (id === void 0) id = null;\n    initFromParentWindow(window.parent, name, version, id);\n  } else if (type === 'window') {\n    if (window.opener != null) {\n      id = qs['id'];\n      if (id === void 0) id = null;\n      initFromParentWindow(window.opener, name, version, id);\n    } else {\n      console.log('Failed to initialize: opener window is NULL');\n    }\n  } else {\n    var testsUrl = qs['data']; // url to the script generating test data\n    if (testsUrl !== void 0) {\n      initFromScript(testsUrl);\n    } else {\n      console.log('Failed to initialize: cannot load tests data');\n    }\n  }\n\n  benchmark.impl = impl;\n}\n\n// performance.now() polyfill\n// https://gist.github.com/paulirish/5438650\n// prepare base perf object\nif (typeof window.performance === 'undefined') {\n  window.performance = {};\n}\nif (!window.performance.now){\n  var nowOffset = Date.now();\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n  window.performance.now = function now(){\n    return Date.now() - nowOffset;\n  };\n}\n\nmodule.exports = init;\n","module.exports={\n  \"private\": true,\n  \"name\": \"vdom-benchmark-set-dom\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Virtual DOM Benchmark: set-dom\",\n  \"license\": \"BSD\",\n  \"repository\": \"https://github.com/localvoid/vdom-benchmark-set-dom\",\n  \"author\": {\n    \"name\": \"Boris Kaul\",\n    \"email\": \"localvoid@gmail.com\",\n    \"url\": \"https://github.com/localvoid\"\n  },\n  \"keywords\": [\n    \"virtual\",\n    \"dom\",\n    \"virtualdom\",\n    \"vdom\",\n    \"diff\",\n    \"browser\",\n    \"benchmark\",\n    \"vdom-benchmark\"\n  ],\n  \"dependencies\": {\n    \"envify\": \"~3.4.1\",\n    \"set-dom\": \"^5.0.2\",\n    \"vdom-benchmark-base\": \"~0.2.4\"\n  },\n  \"devDependencies\": {\n    \"browser-sync\": \"^2.17.5\",\n    \"browserify\": \"^13.1.0\",\n    \"del\": \"^2.2.2\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-gh-pages\": \"~0.5.4\",\n    \"gulp-if\": \"^2.0.1\",\n    \"gulp-sourcemaps\": \"^2.1.1\",\n    \"gulp-uglify\": \"^2.0.0\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.1.0\"\n  }\n}\n","'use strict'\n\nvar benchmark = require('vdom-benchmark-base')\nvar setDOM = require('set-dom')\n\nvar NAME = 'set-dom'\nvar VERSION = require('../../package.json').dependencies['set-dom']\n\nfunction renderTree (nodes, parent, depth) {\n  var e\n  for (var i = 0; i < nodes.length; i++) {\n    var n = nodes[i]\n    if (n.children !== null) {\n      e = document.createElement('div')\n      e.id = '' + depth + '_' + n.key\n      parent.appendChild(e)\n      renderTree(n.children, e, depth + 1)\n    } else {\n      e = document.createElement('span')\n      e.id = '' + depth + '_' + n.key\n      e.textContent = n.key\n      parent.appendChild(e)\n    }\n  }\n}\n\nfunction BenchmarkImpl (container, a, b) {\n  this.container = container\n  this.a = a\n  this.b = b\n  this._root = null\n}\n\nBenchmarkImpl.prototype.setUp = function () {}\n\nBenchmarkImpl.prototype.tearDown = function () {\n  this.container.removeChild(this.container.firstChild)\n}\n\nBenchmarkImpl.prototype.render = function () {\n  this._root = document.createElement('div')\n  renderTree(this.a, this._root, 0)\n  this.container.appendChild(this._root)\n}\n\nBenchmarkImpl.prototype.update = function () {\n  var e = document.createElement('div')\n  renderTree(this.b, e, 0)\n  setDOM(this._root, e)\n}\n\ndocument.addEventListener('DOMContentLoaded', function (e) {\n  benchmark(NAME, VERSION, BenchmarkImpl)\n}, false)\n"]}